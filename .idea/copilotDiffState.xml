<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.vscode/settings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.vscode/settings.json" />
              <option name="updatedContent" value="{&#10;  &quot;editor.formatOnSave&quot;: true,&#10;  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;,&#10;  &quot;prettier.configPath&quot;: &quot;./.prettierrc.json&quot;,&#10;  &quot;prettier.requireConfig&quot;: true,&#10;  &quot;[javascript]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[javascriptreact]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[typescript]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[typescriptreact]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[json]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/(content)/posts/new/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/(content)/posts/new/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;/**&#10; * 게시글 작성 페이지&#10; * &#10; * 공통 PostForm 컴포넌트를 사용하여 게시글 작성 기능을 구현합니다.&#10; */&#10;&#10;import PostForm, { type PostFormData } from &quot;@/components/features/posts/PostForm&quot;;&#10;import { useCreatePost } from &quot;@/hooks/queries/usePostQueries&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;export default function CreatePostPage() {&#10;  const router = useRouter();&#10;  const createPostMutation = useCreatePost();&#10;&#10;  const handleSubmit = async (data: PostFormData) =&gt; {&#10;    const result = await createPostMutation.mutateAsync({&#10;      title: data.title,&#10;      content: data.content,&#10;      tags: data.tags,&#10;      commitMessage: data.commitMessage,&#10;    });&#10;&#10;    // 성공 시 게시글 상세 페이지로 이동&#10;    router.push(`/posts/${result.postId}`);&#10;  };&#10;&#10;  return (&#10;    &lt;PostForm&#10;      mode=&quot;create&quot;&#10;      onSubmit={handleSubmit}&#10;      isLoading={createPostMutation.isPending}&#10;    /&gt;&#10;  );&#10;}" />
              <option name="updatedContent" value="&quot;use client&quot;;&#13;&#10;&#13;&#10;/**&#13;&#10; * 게시글 작성 페이지&#13;&#10; * &#13;&#10; * 공통 PostForm 컴포넌트를 사용하여 게시글 작성 기능을 구현합니다.&#13;&#10; */&#13;&#10;&#13;&#10;import PostForm, { type PostFormData } from &quot;@/components/features/posts/PostForm&quot;;&#13;&#10;import { useCreatePost } from &quot;@/hooks/queries/usePostQueries&quot;;&#13;&#10;import { useRouter } from &quot;next/navigation&quot;;&#13;&#10;&#13;&#10;export default function CreatePostPage() {&#13;&#10;  const router = useRouter();&#13;&#10;  const createPostMutation = useCreatePost();&#13;&#10;&#13;&#10;  const handleSubmit = async (data: PostFormData) =&gt; {&#13;&#10;    const result = await createPostMutation.mutateAsync({&#13;&#10;      title: data.title,&#13;&#10;      content: data.content,&#13;&#10;      tags: data.tags,&#13;&#10;      commitMessage: data.commitMessage,&#13;&#10;    });&#13;&#10;&#13;&#10;    // 성공 시 게시글 상세 페이지로 이동&#13;&#10;    router.push(`/posts/${result.postId}`);&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;PostForm&#13;&#10;      mode=&quot;create&quot;&#13;&#10;      onSubmitAction={handleSubmit}&#13;&#10;      isLoading={createPostMutation.isPending}&#13;&#10;    /&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/layout.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import UserApprovalTable from &quot;@/components/features/admin/UserApprovalTable&quot;;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { usePendingUsers } from &quot;@/hooks/queries/useAdminQueries&quot;;&#10;import { useAuth } from &quot;@/hooks/queries/useUserQueries&quot;;&#10;&#10;export default function AdminPage() {&#10;  const { data: users, isLoading, isError, error } = usePendingUsers();&#10;  const { userProfile, isLoading: isAuthLoading } = useAuth();&#10;&#10;  if (isAuthLoading) {&#10;    return (&#10;      &lt;div className=&quot;container mx-auto py-10&quot;&gt;&#10;        &lt;p&gt;권한 확인 중...&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!userProfile || userProfile.role !== &quot;ADMIN&quot;) {&#10;    return (&#10;      &lt;div className=&quot;container mx-auto py-10 text-center&quot;&gt;&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle&gt;접근 불가&lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;관리자만 접근할 수 있습니다.&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto py-10&quot;&gt;&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;관리자 대시보드&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;가입 승인 대기중인 사용자 목록입니다.&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          {isLoading &amp;&amp; &lt;p&gt;로딩 중...&lt;/p&gt;}&#10;          {isError &amp;&amp; &lt;p&gt;에러: {error.message}&lt;/p&gt;}&#10;          {users &amp;&amp;&#10;            (users.length &gt; 0 ? (&#10;              &lt;UserApprovalTable users={users} /&gt;&#10;            ) : (&#10;              &lt;div className=&quot;py-8 text-center text-gray-500&quot;&gt;&#10;                &lt;p className=&quot;mb-2 text-lg&quot;&gt;승인 대기중인 사용자가 없습니다.&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm&quot;&gt;모든 사용자가 승인되었습니다.&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import UserApprovalTable from &quot;@/components/features/admin/UserApprovalTable&quot;;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { usePendingUsers } from &quot;@/hooks/queries/useAdminQueries&quot;;&#10;import { useAuth } from &quot;@/hooks/queries/useUserQueries&quot;;&#10;&#10;export default function AdminPage() {&#10;  const { data: users, isLoading, isError, error } = usePendingUsers();&#10;  const { userProfile, isLoading: isAuthLoading } = useAuth();&#10;&#10;  if (isAuthLoading) {&#10;    return (&#10;      &lt;div className=&quot;container mx-auto py-10&quot;&gt;&#10;        &lt;p&gt;권한 확인 중...&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!userProfile || userProfile.role !== &quot;ADMIN&quot;) {&#10;    return (&#10;      &lt;div className=&quot;container mx-auto py-10 text-center&quot;&gt;&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle&gt;접근 불가&lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;관리자만 접근할 수 있습니다.&lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto py-10&quot;&gt;&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;관리자 대시보드&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;가입 승인 대기중인 사용자 목록입니다.&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          {isLoading &amp;&amp; &lt;p&gt;로딩 중...&lt;/p&gt;}&#10;          {isError &amp;&amp; &lt;p&gt;에러: {error.message}&lt;/p&gt;}&#10;          {users &amp;&amp;&#10;            (users.length &gt; 0 ? (&#10;              &lt;UserApprovalTable users={users} /&gt;&#10;            ) : (&#10;              &lt;div className=&quot;py-8 text-center text-gray-500&quot;&gt;&#10;                &lt;p className=&quot;mb-2 text-lg&quot;&gt;승인 대기중인 사용자가 없습니다.&lt;/p&gt;&#10;                &lt;p className=&quot;text-sm&quot;&gt;모든 사용자가 승인되었습니다.&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/features/admin/UserApprovalTable.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/features/admin/UserApprovalTable.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from &quot;@/components/ui/table&quot;;&#10;import { useApproveUser } from &quot;@/hooks/queries/useAdminQueries&quot;;&#10;import { PendingUser } from &quot;@/types/user&quot;;&#10;&#10;interface UserApprovalTableProps {&#10;  users: PendingUser[];&#10;}&#10;&#10;export default function UserApprovalTable({ users }: UserApprovalTableProps) {&#10;  const approveUserMutation = useApproveUser();&#10;&#10;  const handleApprove = (userId: string) =&gt; {&#10;    approveUserMutation.mutate(userId);&#10;  };&#10;&#10;  const handleReject = (userId: string) =&gt; {&#10;    // TODO: Implement reject logic&#10;    alert(`사용자 ${userId} 거절`);&#10;  };&#10;&#10;  return (&#10;    &lt;Table&gt;&#10;      &lt;TableHeader&gt;&#10;        &lt;TableRow&gt;&#10;          &lt;TableHead&gt;아이디&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;감자 기수&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;이름&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;직군&lt;/TableHead&gt;&#10;          &lt;TableHead className=&quot;text-right&quot;&gt;작업&lt;/TableHead&gt;&#10;        &lt;/TableRow&gt;&#10;      &lt;/TableHeader&gt;&#10;      &lt;TableBody&gt;&#10;        {users.map((user) =&gt; (&#10;          &lt;TableRow key={user.userId}&gt;&#10;            &lt;TableCell className=&quot;font-medium&quot;&gt;{user.userId}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.gamjaBatch}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.name}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.position}&lt;/TableCell&gt;&#10;            &lt;TableCell className=&quot;space-x-2 text-right&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; handleApprove(user.userId)}&#10;                disabled={approveUserMutation.isPending}&#10;              &gt;&#10;                {approveUserMutation.isPending ? &quot;승인 중...&quot; : &quot;승인&quot;}&#10;              &lt;/Button&gt;&#10;              {/* &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot; onClick={() =&gt; handleReject(user.userId)}&gt;&#10;                거절&#10;              &lt;/Button&gt; */}&#10;            &lt;/TableCell&gt;&#10;          &lt;/TableRow&gt;&#10;        ))}&#10;      &lt;/TableBody&gt;&#10;    &lt;/Table&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import {&#10;  Table,&#10;  TableBody,&#10;  TableCell,&#10;  TableHead,&#10;  TableHeader,&#10;  TableRow,&#10;} from &quot;@/components/ui/table&quot;;&#10;import { useApproveUser } from &quot;@/hooks/queries/useAdminQueries&quot;;&#10;import { UserProfileResponse } from &quot;@/generated/api&quot;;&#10;&#10;interface UserApprovalTableProps {&#10;  users: UserProfileResponse[];&#10;}&#10;&#10;export default function UserApprovalTable({ users }: UserApprovalTableProps) {&#10;  const approveUserMutation = useApproveUser();&#10;&#10;  const handleApprove = (userId: string) =&gt; {&#10;    approveUserMutation.mutate(userId);&#10;  };&#10;&#10;  const handleReject = (userId: string) =&gt; {&#10;    // TODO: Implement reject logic&#10;    alert(`사용자 ${userId} 거절`);&#10;  };&#10;&#10;  return (&#10;    &lt;Table&gt;&#10;      &lt;TableHeader&gt;&#10;        &lt;TableRow&gt;&#10;          &lt;TableHead&gt;아이디&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;감자 기수&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;이름&lt;/TableHead&gt;&#10;          &lt;TableHead&gt;직군&lt;/TableHead&gt;&#10;          &lt;TableHead className=&quot;text-right&quot;&gt;작업&lt;/TableHead&gt;&#10;        &lt;/TableRow&gt;&#10;      &lt;/TableHeader&gt;&#10;      &lt;TableBody&gt;&#10;        {users.map((user) =&gt; (&#10;          &lt;TableRow key={user.githubId || user.email}&gt;&#10;            &lt;TableCell className=&quot;font-medium&quot;&gt;{user.githubId || user.email}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.gamjaBatch}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.name}&lt;/TableCell&gt;&#10;            &lt;TableCell&gt;{user.position}&lt;/TableCell&gt;&#10;            &lt;TableCell className=&quot;space-x-2 text-right&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; handleApprove(user.githubId || user.email || &quot;&quot;)}&#10;                disabled={approveUserMutation.isPending}&#10;              &gt;&#10;                {approveUserMutation.isPending ? &quot;승인 중...&quot; : &quot;승인&quot;}&#10;              &lt;/Button&gt;&#10;              {/* &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot; onClick={() =&gt; handleReject(user.userId)}&gt;&#10;                거절&#10;              &lt;/Button&gt; */}&#10;            &lt;/TableCell&gt;&#10;          &lt;/TableRow&gt;&#10;        ))}&#10;      &lt;/TableBody&gt;&#10;    &lt;/Table&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/hooks/queries/useAdminQueries.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/hooks/queries/useAdminQueries.ts" />
              <option name="originalContent" value="import { adminService } from &quot;@/services/adminService&quot;;&#10;import { ApproveUserResponse, PendingUsersResponse } from &quot;@/types/user&quot;;&#10;import { useMutation, useQuery, useQueryClient, UseQueryOptions } from &quot;@tanstack/react-query&quot;;&#10;&#10;export const ADMIN_QUERY_KEYS = {&#10;  all: [&quot;admin&quot;] as const,&#10;  pendingUsers: () =&gt; [...ADMIN_QUERY_KEYS.all, &quot;pendingUsers&quot;] as const,&#10;};&#10;&#10;export function usePendingUsers(&#10;  options?: Omit&lt;UseQueryOptions&lt;PendingUsersResponse, Error&gt;, &quot;queryKey&quot; | &quot;queryFn&quot;&gt;&#10;) {&#10;  return useQuery({&#10;    queryKey: ADMIN_QUERY_KEYS.pendingUsers(),&#10;    queryFn: () =&gt; adminService.getPendingUsers(),&#10;    ...options,&#10;  });&#10;}&#10;&#10;export function useApproveUser() {&#10;  const queryClient = useQueryClient();&#10;&#10;  return useMutation&lt;ApproveUserResponse, Error, string&gt;({&#10;    mutationFn: (userId: string) =&gt; adminService.approveUser(userId),&#10;    onSuccess: () =&gt; {&#10;      queryClient.invalidateQueries({ queryKey: ADMIN_QUERY_KEYS.pendingUsers() });&#10;    },&#10;  });&#10;}&#10;" />
              <option name="updatedContent" value="import { adminService } from &quot;@/services/adminService&quot;;&#10;import { ResponseDto, UserProfileResponse } from &quot;@/generated/api&quot;;&#10;import { useMutation, useQuery, useQueryClient, UseQueryOptions } from &quot;@tanstack/react-query&quot;;&#10;&#10;export const ADMIN_QUERY_KEYS = {&#10;  all: [&quot;admin&quot;] as const,&#10;  pendingUsers: () =&gt; [...ADMIN_QUERY_KEYS.all, &quot;pendingUsers&quot;] as const,&#10;};&#10;&#10;export function usePendingUsers(&#10;  options?: Omit&lt;UseQueryOptions&lt;UserProfileResponse[], Error&gt;, &quot;queryKey&quot; | &quot;queryFn&quot;&gt;&#10;) {&#10;  return useQuery({&#10;    queryKey: ADMIN_QUERY_KEYS.pendingUsers(),&#10;    queryFn: () =&gt; adminService.getPendingUsers(),&#10;    ...options,&#10;  });&#10;}&#10;&#10;export function useApproveUser() {&#10;  const queryClient = useQueryClient();&#10;&#10;  return useMutation&lt;UserProfileResponse, Error, string&gt;({&#10;    mutationFn: (userId: string) =&gt; adminService.approveUser(userId),&#10;    onSuccess: () =&gt; {&#10;      queryClient.invalidateQueries({ queryKey: ADMIN_QUERY_KEYS.pendingUsers() });&#10;    },&#10;  });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>