<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.prettierrc">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.prettierrc" />
              <option name="updatedContent" value="{&#10;  &quot;singleQuote&quot;: false,&#10;  &quot;trailingComma&quot;: &quot;es5&quot;,&#10;  &quot;tabWidth&quot;: 2,&#10;  &quot;semi&quot;: true,&#10;  &quot;printWidth&quot;: 100,&#10;  &quot;endOfLine&quot;: &quot;auto&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.vscode/settings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.vscode/settings.json" />
              <option name="updatedContent" value="{&#10;  &quot;editor.formatOnSave&quot;: true,&#10;  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;,&#10;  &quot;prettier.configPath&quot;: &quot;./.prettierrc.json&quot;,&#10;  &quot;prettier.requireConfig&quot;: true,&#10;  &quot;[javascript]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[javascriptreact]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[typescript]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[typescriptreact]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  },&#10;  &quot;[json]&quot;: {&#10;    &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/layout.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/mypage/tabs/LikesTab.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/mypage/tabs/LikesTab.tsx" />
              <option name="originalContent" value="/**&#10; * 마이페이지 좋아요 탭 컴포넌트&#10; *&#10; * 사용자가 좋아요한 게시글 목록을 표시하며,&#10; * 로딩, 에러, 빈 상태를 독립적으로 관리합니다.&#10; */&#10;&#10;import CustomPagination from &quot;@/components/common/CustomPagination&quot;;&#10;import PostCard from &quot;@/components/features/posts/PostCard&quot;;&#10;import ErrorDisplay from &quot;@/components/mypage/shared/ErrorDisplay&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import { PostResponse } from &quot;@/generated/api&quot;;&#10;import { useMyLikes } from &quot;@/hooks/queries/useMyPageQueries&quot;;&#10;import { usePagination } from &quot;@/hooks/usePagination&quot;;&#10;&#10;export default function LikesTab() {&#10;  const { currentPage, currentPageForAPI, setPage } = usePagination();&#10;  const pageSize = 5;&#10;&#10;  const {&#10;    data: likes,&#10;    isLoading,&#10;    error,&#10;  } = useMyLikes({&#10;    page: currentPageForAPI,&#10;    size: pageSize,&#10;    sort: [&quot;createdAt,desc&quot;], // 최신순 정렬&#10;  });&#10;&#10;  const likedPosts = (likes?.content as PostResponse[]) || [];&#10;  const totalPages = likes?.totalPages || 0;&#10;&#10;  const handlePageChange = (page: number) =&gt; {&#10;    setPage(page); // usePagination 훅의 setPage 사용&#10;  };&#10;&#10;  // 로딩 상태&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;        {/* 좋아요 목록 로딩 스켈레톤 */}&#10;        {[...Array(3)].map((_, index) =&gt; (&#10;          &lt;div key={index} className=&quot;space-y-3&quot;&gt;&#10;            &lt;Skeleton className=&quot;h-6 w-3/4&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-1/2&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // 에러 상태&#10;  if (error) {&#10;    return &lt;ErrorDisplay title=&quot;좋아요 목록을 불러올 수 없습니다&quot; error={error} /&gt;;&#10;  }&#10;&#10;  // 빈 상태&#10;  if (likedPosts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;        &lt;div className=&quot;mb-4 text-gray-400&quot;&gt;&#10;          &lt;svg className=&quot;mx-auto h-16 w-16&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path&#10;              strokeLinecap=&quot;round&quot;&#10;              strokeLinejoin=&quot;round&quot;&#10;              strokeWidth={1}&#10;              d=&quot;M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z&quot;&#10;            /&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;        &lt;p className=&quot;mb-2 text-lg text-gray-500&quot;&gt;좋아요한 게시글이 없습니다&lt;/p&gt;&#10;        &lt;p className=&quot;text-sm text-gray-400&quot;&gt;마음에 드는 게시글에 좋아요를 눌러보세요!&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  // 좋아요 목록 표시&#10;  return (&#10;    &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;      {likedPosts.map((post: PostResponse) =&gt; (&#10;        &lt;PostCard key={post.postId} post={post} /&gt;&#10;      ))}&#10;      &lt;CustomPagination&#10;        currentPage={currentPage}&#10;        totalPages={totalPages}&#10;        onPageChange={handlePageChange}&#10;        className=&quot;mt-12&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * 마이페이지 좋아요 탭 컴포넌트&#10; *&#10; * 사용자가 좋아요한 게시글 목록을 표시하며,&#10; * 로딩, 에러, 빈 상태를 독립적으로 관리합니다.&#10; */&#10;&#10;import CustomPagination from &quot;@/components/common/CustomPagination&quot;;&#10;import PostCard from &quot;@/components/features/posts/PostCard&quot;;&#10;import ErrorDisplay from &quot;@/components/mypage/shared/ErrorDisplay&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import { PostDetailResponse } from &quot;@/generated/api&quot;;&#10;import { useMyLikes } from &quot;@/hooks/queries/useMyPageQueries&quot;;&#10;import { usePagination } from &quot;@/hooks/usePagination&quot;;&#10;&#10;export default function LikesTab() {&#10;  const { currentPage, currentPageForAPI, setPage } = usePagination();&#10;  const pageSize = 5;&#10;&#10;  const {&#10;    data: likes,&#10;    isLoading,&#10;    error,&#10;  } = useMyLikes({&#10;    page: currentPageForAPI,&#10;    size: pageSize,&#10;    sort: [&quot;createdAt,desc&quot;], // 최신순 정렬&#10;  });&#10;&#10;  const likedPosts = (likes?.content as PostDetailResponse[]) || [];&#10;  const totalPages = likes?.totalPages || 0;&#10;&#10;  const handlePageChange = (page: number) =&gt; {&#10;    setPage(page); // usePagination 훅의 setPage 사용&#10;  };&#10;&#10;  // 로딩 상태&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;        {/* 좋아요 목록 로딩 스켈레톤 */}&#10;        {[...Array(3)].map((_, index) =&gt; (&#10;          &lt;div key={index} className=&quot;space-y-3&quot;&gt;&#10;            &lt;Skeleton className=&quot;h-6 w-3/4&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-1/2&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // 에러 상태&#10;  if (error) {&#10;    return &lt;ErrorDisplay title=&quot;좋아요 목록을 불러올 수 없습니다&quot; error={error} /&gt;;&#10;  }&#10;&#10;  // 빈 상태&#10;  if (likedPosts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;        &lt;div className=&quot;mb-4 text-gray-400&quot;&gt;&#10;          &lt;svg className=&quot;mx-auto h-16 w-16&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path&#10;              strokeLinecap=&quot;round&quot;&#10;              strokeLinejoin=&quot;round&quot;&#10;              strokeWidth={1}&#10;              d=&quot;M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z&quot;&#10;            /&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;        &lt;p className=&quot;mb-2 text-lg text-gray-500&quot;&gt;좋아요한 게시글이 없습니다&lt;/p&gt;&#10;        &lt;p className=&quot;text-sm text-gray-400&quot;&gt;마음에 드는 게시글에 좋아요를 눌러보세요!&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  // 좋아요 목록 표시&#10;  return (&#10;    &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;      {likedPosts.map((post: PostDetailResponse) =&gt; (&#10;        &lt;PostCard key={post.postId} post={post} /&gt;&#10;      ))}&#10;      &lt;CustomPagination&#10;        currentPage={currentPage}&#10;        totalPages={totalPages}&#10;        onPageChange={handlePageChange}&#10;        className=&quot;mt-12&quot;&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/mypage/tabs/PostsTab.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/mypage/tabs/PostsTab.tsx" />
              <option name="originalContent" value="/**&#10; * 마이페이지 게시글 탭 컴포넌트&#10; *&#10; * 사용자가 작성한 게시글 목록을 표시하며,&#10; * 로딩, 에러, 빈 상태를 독립적으로 관리합니다.&#10; */&#10;&#10;import CustomPagination from &quot;@/components/common/CustomPagination&quot;;&#10;import PostCard from &quot;@/components/features/posts/PostCard&quot;;&#10;import ErrorDisplay from &quot;@/components/mypage/shared/ErrorDisplay&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import { PostResponse } from &quot;@/generated/api&quot;;&#10;import { useMyPosts } from &quot;@/hooks/queries/useMyPageQueries&quot;;&#10;import { usePagination } from &quot;@/hooks/usePagination&quot;;&#10;&#10;export default function PostsTab() {&#10;  const { currentPage, currentPageForAPI, setPage } = usePagination();&#10;  const pageSize = 5;&#10;&#10;  const {&#10;    data: postsData,&#10;    isLoading,&#10;    error,&#10;  } = useMyPosts({&#10;    page: currentPageForAPI,&#10;    size: pageSize,&#10;    sort: [&quot;createdAt,desc&quot;], // 최신순 정렬&#10;  });&#10;&#10;  const posts = (postsData?.content as PostResponse[]) || [];&#10;  const totalPages = postsData?.totalPages || 0;&#10;&#10;  const handlePageChange = (page: number) =&gt; {&#10;    setPage(page); // usePagination 훅의 setPage 사용&#10;  };&#10;&#10;  // 로딩 상태&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;        {/* 게시글 로딩 스켈레톤 */}&#10;        {[...Array(3)].map((_, index) =&gt; (&#10;          &lt;div key={index} className=&quot;space-y-3&quot;&gt;&#10;            &lt;Skeleton className=&quot;h-6 w-3/4&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-1/2&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  // 에러 상태&#10;  if (error) {&#10;    return &lt;ErrorDisplay title=&quot;게시글을 불러올 수 없습니다&quot; error={error} /&gt;;&#10;  }&#10;  // 빈 상태&#10;  if (posts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;        &lt;div className=&quot;mb-4 text-gray-400&quot;&gt;&#10;          &lt;svg className=&quot;mx-auto h-16 w-16&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path&#10;              strokeLinecap=&quot;round&quot;&#10;              strokeLinejoin=&quot;round&quot;&#10;              strokeWidth={1}&#10;              d=&quot;M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z&quot;&#10;            /&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;        &lt;p className=&quot;mb-2 text-lg text-gray-500&quot;&gt;작성한 게시글이 없습니다&lt;/p&gt;&#10;        &lt;p className=&quot;text-sm text-gray-400&quot;&gt;첫 번째 게시글을 작성해보세요!&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // 게시글 목록 표시&#10;  return (&#10;    &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;      {posts.map((post) =&gt; (&#10;        &lt;PostCard key={post.postId} post={post} /&gt;&#10;      ))}&#10;      {totalPages &gt; 1 &amp;&amp; (&#10;        &lt;CustomPagination&#10;          currentPage={currentPage} // 이미 1부터 시작하는 값&#10;          totalPages={totalPages}&#10;          onPageChange={handlePageChange}&#10;          className=&quot;mt-12&quot;&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="/**&#10; * 마이페이지 게시글 탭 컴포넌트&#10; *&#10; * 사용자가 작성한 게시글 목록을 표시하며,&#10; * 로딩, 에러, 빈 상태를 독립적으로 관리합니다.&#10; */&#10;&#10;import CustomPagination from &quot;@/components/common/CustomPagination&quot;;&#10;import PostCard from &quot;@/components/features/posts/PostCard&quot;;&#10;import ErrorDisplay from &quot;@/components/mypage/shared/ErrorDisplay&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import { PostDetailResponse } from &quot;@/generated/api&quot;;&#10;import { useMyPosts } from &quot;@/hooks/queries/useMyPageQueries&quot;;&#10;import { usePagination } from &quot;@/hooks/usePagination&quot;;&#10;&#10;export default function PostsTab() {&#10;  const { currentPage, currentPageForAPI, setPage } = usePagination();&#10;  const pageSize = 5;&#10;&#10;  const {&#10;    data: postsData,&#10;    isLoading,&#10;    error,&#10;  } = useMyPosts({&#10;    page: currentPageForAPI,&#10;    size: pageSize,&#10;    sort: [&quot;createdAt,desc&quot;], // 최신순 정렬&#10;  });&#10;&#10;  const posts = (postsData?.content as PostDetailResponse[]) || [];&#10;  const totalPages = postsData?.totalPages || 0;&#10;&#10;  const handlePageChange = (page: number) =&gt; {&#10;    setPage(page); // usePagination 훅의 setPage 사용&#10;  };&#10;&#10;  // 로딩 상태&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;        {/* 게시글 로딩 스켈레톤 */}&#10;        {[...Array(3)].map((_, index) =&gt; (&#10;          &lt;div key={index} className=&quot;space-y-3&quot;&gt;&#10;            &lt;Skeleton className=&quot;h-6 w-3/4&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-1/2&quot; /&gt;&#10;            &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;  // 에러 상태&#10;  if (error) {&#10;    return &lt;ErrorDisplay title=&quot;게시글을 불러올 수 없습니다&quot; error={error} /&gt;;&#10;  }&#10;  // 빈 상태&#10;  if (posts.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;mt-12 text-center&quot;&gt;&#10;        &lt;div className=&quot;mb-4 text-gray-400&quot;&gt;&#10;          &lt;svg className=&quot;mx-auto h-16 w-16&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            &lt;path&#10;              strokeLinecap=&quot;round&quot;&#10;              strokeLinejoin=&quot;round&quot;&#10;              strokeWidth={1}&#10;              d=&quot;M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z&quot;&#10;            /&gt;&#10;          &lt;/svg&gt;&#10;        &lt;/div&gt;&#10;        &lt;p className=&quot;mb-2 text-lg text-gray-500&quot;&gt;작성한 게시글이 없습니다&lt;/p&gt;&#10;        &lt;p className=&quot;text-sm text-gray-400&quot;&gt;첫 번째 게시글을 작성해보세요!&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  // 게시글 목록 표시&#10;  return (&#10;    &lt;div className=&quot;mt-8 flex flex-col gap-8&quot;&gt;&#10;      {posts.map((post) =&gt; (&#10;        &lt;PostCard key={post.postId} post={post} /&gt;&#10;      ))}&#10;      {totalPages &gt; 1 &amp;&amp; (&#10;        &lt;CustomPagination&#10;          currentPage={currentPage} // 이미 1부터 시작하는 값&#10;          totalPages={totalPages}&#10;          onPageChange={handlePageChange}&#10;          className=&quot;mt-12&quot;&#10;        /&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>