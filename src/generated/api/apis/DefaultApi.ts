/* tslint:disable */
/* eslint-disable */
/**
 * 모든 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CommentRequest,
  Pageable,
  PagedResponse,
  PostDetailResponse,
  PostPopularResponse,
  PostRequest,
  PostResponse,
  ProjectRequest,
  ResponseDto,
  UpdateProfileRequest,
  UserActivityResponse,
  UserProfileRequest,
  UserProfileResponse,
} from "../models/index";
import {
  CommentRequestFromJSON,
  CommentRequestToJSON,
  PageableFromJSON,
  PageableToJSON,
  PagedResponseFromJSON,
  PagedResponseToJSON,
  PostDetailResponseFromJSON,
  PostDetailResponseToJSON,
  PostPopularResponseFromJSON,
  PostPopularResponseToJSON,
  PostRequestFromJSON,
  PostRequestToJSON,
  PostResponseFromJSON,
  PostResponseToJSON,
  ProjectRequestFromJSON,
  ProjectRequestToJSON,
  ResponseDtoFromJSON,
  ResponseDtoToJSON,
  UpdateProfileRequestFromJSON,
  UpdateProfileRequestToJSON,
  UserActivityResponseFromJSON,
  UserActivityResponseToJSON,
  UserProfileRequestFromJSON,
  UserProfileRequestToJSON,
  UserProfileResponseFromJSON,
  UserProfileResponseToJSON,
} from "../models/index";

export interface AddCommentRequest {
  postId: number;
  commentRequest: CommentRequest;
}

export interface ApproveUserProfileRequest {
  id: number;
}

export interface CompleteProfileRequest {
  userProfileRequest: UserProfileRequest;
}

export interface CreateProjectRequest {
  request: ProjectRequest;
  thumbnail: Blob;
}

export interface DeleteCommentRequest {
  commentId: number;
}

export interface DeleteProjectRequest {
  projectId: number;
}

export interface GetAllProjectsRequest {
  pageable: Pageable;
}

export interface GetCommentsRequest {
  postId: number;
}

export interface GetCommitHistoriesRequest {
  postId: number;
}

export interface GetMyCommentsRequest {
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetMyLikesRequest {
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetMyPostsRequest {
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface GetPostDetailRequest {
  postId: number;
}

export interface GetPostsRequest {
  page?: number;
  size?: number;
  sort?: Array<string>;
  tags?: Array<string>;
}

export interface GetPostsByTagRequest {
  tagName: string;
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface IsPostLikedRequest {
  postId: number;
}

export interface LikePostRequest {
  postId: number;
}

export interface PublishPostRequest {
  postRequest: PostRequest;
}

export interface ReissueRequest {
  refreshToken?: string;
}

export interface RemovePostRequest {
  id: number;
}

export interface RevisePostRequest {
  id: number;
  postRequest: PostRequest;
}

export interface SearchPostsRequest {
  keyword: string;
  page?: number;
  size?: number;
  sort?: Array<string>;
}

export interface UnlikePostRequest {
  postId: number;
}

export interface UpdateProfileOperationRequest {
  updateProfileRequest: UpdateProfileRequest;
}

export interface UpdateProfileImageRequest {
  file: Blob;
}

export interface UpdateProjectRequest {
  projectId: number;
  request: ProjectRequest;
  thumbnail?: Blob;
}

export interface UploadImageRequest {
  file: Blob;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * 게시물에 댓글 등록
   */
  async addCommentRaw(
    requestParameters: AddCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling addComment().'
      );
    }

    if (requestParameters["commentRequest"] == null) {
      throw new runtime.RequiredError(
        "commentRequest",
        'Required parameter "commentRequest" was null or undefined when calling addComment().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/comment/{postId}/comments`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CommentRequestToJSON(requestParameters["commentRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 게시물에 댓글 등록
   */
  async addComment(
    requestParameters: AddCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.addCommentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 특정 사용자 승인 (PENDING → USER)
   */
  async approveUserProfileRaw(
    requestParameters: ApproveUserProfileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling approveUserProfile().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/admin/users/{id}/approve`;
    urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 특정 사용자 승인 (PENDING → USER)
   */
  async approveUserProfile(
    requestParameters: ApproveUserProfileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.approveUserProfileRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 추가 정보 입력(회원가입용)
   */
  async completeProfileRaw(
    requestParameters: CompleteProfileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserProfileResponse>> {
    if (requestParameters["userProfileRequest"] == null) {
      throw new runtime.RequiredError(
        "userProfileRequest",
        'Required parameter "userProfileRequest" was null or undefined when calling completeProfile().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/complete`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserProfileRequestToJSON(requestParameters["userProfileRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserProfileResponseFromJSON(jsonValue)
    );
  }

  /**
   * 추가 정보 입력(회원가입용)
   */
  async completeProfile(
    requestParameters: CompleteProfileRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserProfileResponse> {
    const response = await this.completeProfileRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 프로젝트 생성
   */
  async createProjectRaw(
    requestParameters: CreateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["request"] == null) {
      throw new runtime.RequiredError(
        "request",
        'Required parameter "request" was null or undefined when calling createProject().'
      );
    }

    if (requestParameters["thumbnail"] == null) {
      throw new runtime.RequiredError(
        "thumbnail",
        'Required parameter "thumbnail" was null or undefined when calling createProject().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["request"] != null) {
      formParams.append(
        "request",
        new Blob([JSON.stringify(ResponseDtoToJSON(requestParameters["request"]))], {
          type: "application/json",
        })
      );
    }

    if (requestParameters["thumbnail"] != null) {
      formParams.append("thumbnail", requestParameters["thumbnail"] as any);
    }

    let urlPath = `/api/v1/projects/create`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로젝트 생성
   */
  async createProject(
    requestParameters: CreateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.createProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 댓글 삭제
   */
  async deleteCommentRaw(
    requestParameters: DeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["commentId"] == null) {
      throw new runtime.RequiredError(
        "commentId",
        'Required parameter "commentId" was null or undefined when calling deleteComment().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/comment/{commentId}`;
    urlPath = urlPath.replace(
      `{${"commentId"}}`,
      encodeURIComponent(String(requestParameters["commentId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 댓글 삭제
   */
  async deleteComment(
    requestParameters: DeleteCommentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.deleteCommentRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 프로필 사진 삭제
   */
  async deleteProfileImageRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/profile-images`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로필 사진 삭제
   */
  async deleteProfileImage(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.deleteProfileImageRaw(initOverrides);
    return await response.value();
  }

  /**
   * 프로젝트 삭제
   */
  async deleteProjectRaw(
    requestParameters: DeleteProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["projectId"] == null) {
      throw new runtime.RequiredError(
        "projectId",
        'Required parameter "projectId" was null or undefined when calling deleteProject().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/projects/delete/{projectId}`;
    urlPath = urlPath.replace(
      `{${"projectId"}}`,
      encodeURIComponent(String(requestParameters["projectId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로젝트 삭제
   */
  async deleteProject(
    requestParameters: DeleteProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.deleteProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 유저 활동(내가 쓴 글/댓글/좋아요 개수) 조회
   */
  async getActivitySummaryRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserActivityResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/activity`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserActivityResponseFromJSON(jsonValue)
    );
  }

  /**
   * 유저 활동(내가 쓴 글/댓글/좋아요 개수) 조회
   */
  async getActivitySummary(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserActivityResponse> {
    const response = await this.getActivitySummaryRaw(initOverrides);
    return await response.value();
  }

  /**
   * 전체 프로젝트 목록 조회
   */
  async getAllProjectsRaw(
    requestParameters: GetAllProjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["pageable"] == null) {
      throw new runtime.RequiredError(
        "pageable",
        'Required parameter "pageable" was null or undefined when calling getAllProjects().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["pageable"] != null) {
      queryParameters["pageable"] = requestParameters["pageable"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/projects`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 전체 프로젝트 목록 조회
   */
  async getAllProjects(
    requestParameters: GetAllProjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getAllProjectsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 전체 태그 조회
   */
  async getAllTagsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/tags`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * 전체 태그 조회
   */
  async getAllTags(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.getAllTagsRaw(initOverrides);
    return await response.value();
  }

  /**
   * 게시물의 댓글 목록 조회
   */
  async getCommentsRaw(
    requestParameters: GetCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling getComments().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/comment/{postId}/comments`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 게시물의 댓글 목록 조회
   */
  async getComments(
    requestParameters: GetCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getCommentsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 게시물 커밋 내역
   */
  async getCommitHistoriesRaw(
    requestParameters: GetCommitHistoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling getCommitHistories().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/commits/{postId}`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 게시물 커밋 내역
   */
  async getCommitHistories(
    requestParameters: GetCommitHistoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getCommitHistoriesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 정보 조회
   */
  async getCurrentUserProfileRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserProfileResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/get/profile`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserProfileResponseFromJSON(jsonValue)
    );
  }

  /**
   * 정보 조회
   */
  async getCurrentUserProfile(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserProfileResponse> {
    const response = await this.getCurrentUserProfileRaw(initOverrides);
    return await response.value();
  }

  /**
   * 역할 조회
   */
  async getCurrentUserRoleRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/role`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * 역할 조회
   */
  async getCurrentUserRole(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<string> {
    const response = await this.getCurrentUserRoleRaw(initOverrides);
    return await response.value();
  }

  /**
   * 내가 단 댓글 목록 조회
   */
  async getMyCommentsRaw(
    requestParameters: GetMyCommentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/comment/me/comments`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 내가 단 댓글 목록 조회
   */
  async getMyComments(
    requestParameters: GetMyCommentsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getMyCommentsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 내가 누른 좋아요 목록 조회
   */
  async getMyLikesRaw(
    requestParameters: GetMyLikesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/likes/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 내가 누른 좋아요 목록 조회
   */
  async getMyLikes(
    requestParameters: GetMyLikesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getMyLikesRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 내가 쓴 게시물 목록 조회
   */
  async getMyPostsRaw(
    requestParameters: GetMyPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PagedResponse>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedResponseFromJSON(jsonValue));
  }

  /**
   * 내가 쓴 게시물 목록 조회
   */
  async getMyPosts(
    requestParameters: GetMyPostsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PagedResponse> {
    const response = await this.getMyPostsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 대기 중인(PENDING) 사용자 전체 조회
   */
  async getPendingUsersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/admin/users/pending`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 대기 중인(PENDING) 사용자 전체 조회
   */
  async getPendingUsers(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getPendingUsersRaw(initOverrides);
    return await response.value();
  }

  /**
   * 단일 게시물 상세 조회
   */
  async getPostDetailRaw(
    requestParameters: GetPostDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PostDetailResponse>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling getPostDetail().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/{postId}`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostDetailResponseFromJSON(jsonValue)
    );
  }

  /**
   * 단일 게시물 상세 조회
   */
  async getPostDetail(
    requestParameters: GetPostDetailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PostDetailResponse> {
    const response = await this.getPostDetailRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 최신순 게시물 목록 조회
   */
  async getPostsRaw(
    requestParameters: GetPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PagedResponse>> {
    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    if (requestParameters["tags"] != null) {
      queryParameters["tags"] = requestParameters["tags"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedResponseFromJSON(jsonValue));
  }

  /**
   * 최신순 게시물 목록 조회
   */
  async getPosts(
    requestParameters: GetPostsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PagedResponse> {
    const response = await this.getPostsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 태그별 게시물 조회
   */
  async getPostsByTagRaw(
    requestParameters: GetPostsByTagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PagedResponse>> {
    if (requestParameters["tagName"] == null) {
      throw new runtime.RequiredError(
        "tagName",
        'Required parameter "tagName" was null or undefined when calling getPostsByTag().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/tags/{tagName}`;
    urlPath = urlPath.replace(
      `{${"tagName"}}`,
      encodeURIComponent(String(requestParameters["tagName"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedResponseFromJSON(jsonValue));
  }

  /**
   * 태그별 게시물 조회
   */
  async getPostsByTag(
    requestParameters: GetPostsByTagRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PagedResponse> {
    const response = await this.getPostsByTagRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 프로필 사진 확인
   */
  async getProfileImageRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/profile-images`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로필 사진 확인
   */
  async getProfileImage(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.getProfileImageRaw(initOverrides);
    return await response.value();
  }

  /**
   * 주간 인기 게시물 조회
   */
  async getWeeklyPopularPostsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PostPopularResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/popular`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PostPopularResponseFromJSON)
    );
  }

  /**
   * 주간 인기 게시물 조회
   */
  async getWeeklyPopularPosts(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PostPopularResponse>> {
    const response = await this.getWeeklyPopularPostsRaw(initOverrides);
    return await response.value();
  }

  /**
   * 내가 해당 게시글에 좋아요 눌렀는지 여부 조회
   */
  async isPostLikedRaw(
    requestParameters: IsPostLikedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling isPostLiked().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/likes/{postId}/liked`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 내가 해당 게시글에 좋아요 눌렀는지 여부 조회
   */
  async isPostLiked(
    requestParameters: IsPostLikedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.isPostLikedRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 게시글 좋아요
   */
  async likePostRaw(
    requestParameters: LikePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling likePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/likes/{postId}`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 게시글 좋아요
   */
  async likePost(
    requestParameters: LikePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.likePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 로그아웃
   */
  async logoutRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/auth/me/logout`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 로그아웃
   */
  async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDto> {
    const response = await this.logoutRaw(initOverrides);
    return await response.value();
  }

  /**
   * 게시물 작성
   */
  async publishPostRaw(
    requestParameters: PublishPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (requestParameters["postRequest"] == null) {
      throw new runtime.RequiredError(
        "postRequest",
        'Required parameter "postRequest" was null or undefined when calling publishPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PostRequestToJSON(requestParameters["postRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostResponseFromJSON(jsonValue));
  }

  /**
   * 게시물 작성
   */
  async publishPost(
    requestParameters: PublishPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PostResponse> {
    const response = await this.publishPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 토큰 재발급
   */
  async reissueRaw(
    requestParameters: ReissueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/auth/reissue`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 토큰 재발급
   */
  async reissue(
    requestParameters: ReissueRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.reissueRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 게시물 삭제
   */
  async removePostRaw(
    requestParameters: RemovePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling removePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/{id}`;
    urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * 게시물 삭제
   */
  async removePost(
    requestParameters: RemovePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.removePostRaw(requestParameters, initOverrides);
  }

  /**
   * 게시물 수정
   */
  async revisePostRaw(
    requestParameters: RevisePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling revisePost().'
      );
    }

    if (requestParameters["postRequest"] == null) {
      throw new runtime.RequiredError(
        "postRequest",
        'Required parameter "postRequest" was null or undefined when calling revisePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/{id}`;
    urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: PostRequestToJSON(requestParameters["postRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PostResponseFromJSON(jsonValue));
  }

  /**
   * 게시물 수정
   */
  async revisePost(
    requestParameters: RevisePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PostResponse> {
    const response = await this.revisePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 게시물 검색
   */
  async searchPostsRaw(
    requestParameters: SearchPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PagedResponse>> {
    if (requestParameters["keyword"] == null) {
      throw new runtime.RequiredError(
        "keyword",
        'Required parameter "keyword" was null or undefined when calling searchPosts().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["sort"] != null) {
      queryParameters["sort"] = requestParameters["sort"];
    }

    if (requestParameters["keyword"] != null) {
      queryParameters["keyword"] = requestParameters["keyword"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/posts/search`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PagedResponseFromJSON(jsonValue));
  }

  /**
   * 게시물 검색
   */
  async searchPosts(
    requestParameters: SearchPostsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PagedResponse> {
    const response = await this.searchPostsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 좋아요 취소
   */
  async unlikePostRaw(
    requestParameters: UnlikePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["postId"] == null) {
      throw new runtime.RequiredError(
        "postId",
        'Required parameter "postId" was null or undefined when calling unlikePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/likes/{postId}`;
    urlPath = urlPath.replace(
      `{${"postId"}}`,
      encodeURIComponent(String(requestParameters["postId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 좋아요 취소
   */
  async unlikePost(
    requestParameters: UnlikePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.unlikePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 정보 업데이트(마이페이지용)
   */
  async updateProfileRaw(
    requestParameters: UpdateProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserProfileResponse>> {
    if (requestParameters["updateProfileRequest"] == null) {
      throw new runtime.RequiredError(
        "updateProfileRequest",
        'Required parameter "updateProfileRequest" was null or undefined when calling updateProfile().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/update/profile`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateProfileRequestToJSON(requestParameters["updateProfileRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserProfileResponseFromJSON(jsonValue)
    );
  }

  /**
   * 정보 업데이트(마이페이지용)
   */
  async updateProfile(
    requestParameters: UpdateProfileOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserProfileResponse> {
    const response = await this.updateProfileRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 프로필 사진 업로드/수정
   */
  async updateProfileImageRaw(
    requestParameters: UpdateProfileImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["file"] == null) {
      throw new runtime.RequiredError(
        "file",
        'Required parameter "file" was null or undefined when calling updateProfileImage().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    let urlPath = `/api/v1/profile-images`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로필 사진 업로드/수정
   */
  async updateProfileImage(
    requestParameters: UpdateProfileImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.updateProfileImageRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 프로젝트 수정
   */
  async updateProjectRaw(
    requestParameters: UpdateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["projectId"] == null) {
      throw new runtime.RequiredError(
        "projectId",
        'Required parameter "projectId" was null or undefined when calling updateProject().'
      );
    }

    if (requestParameters["request"] == null) {
      throw new runtime.RequiredError(
        "request",
        'Required parameter "request" was null or undefined when calling updateProject().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["request"] != null) {
      formParams.append(
        "request",
        new Blob([JSON.stringify(ResponseDtoToJSON(requestParameters["request"]))], {
          type: "application/json",
        })
      );
    }

    if (requestParameters["thumbnail"] != null) {
      formParams.append("thumbnail", requestParameters["thumbnail"] as any);
    }

    let urlPath = `/api/v1/projects/update/{projectId}`;
    urlPath = urlPath.replace(
      `{${"projectId"}}`,
      encodeURIComponent(String(requestParameters["projectId"]))
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 프로젝트 수정
   */
  async updateProject(
    requestParameters: UpdateProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.updateProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 게시글 이미지 업로드
   */
  async uploadImageRaw(
    requestParameters: UploadImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResponseDto>> {
    if (requestParameters["file"] == null) {
      throw new runtime.RequiredError(
        "file",
        'Required parameter "file" was null or undefined when calling uploadImage().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    let urlPath = `/api/v1/posts/images`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDtoFromJSON(jsonValue));
  }

  /**
   * 게시글 이미지 업로드
   */
  async uploadImage(
    requestParameters: UploadImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResponseDto> {
    const response = await this.uploadImageRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 계정 삭제
   */
  async withdrawRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/users/me/withdraw`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * 계정 삭제
   */
  async withdraw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
    const response = await this.withdrawRaw(initOverrides);
    return await response.value();
  }
}
